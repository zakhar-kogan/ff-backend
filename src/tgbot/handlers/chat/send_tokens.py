import asyncio
import random

from telegram import Message, Update
from telegram.error import BadRequest
from telegram.ext import ContextTypes

from src.tgbot.constants import UserType
from src.tgbot.handlers.treasury.service import get_user_balance, transfer_tokens
from src.tgbot.service import get_user_by_id


async def _reply_and_delete(message: Message, text: str, sleep_sec: int = 5):
    msg = await message.reply_text(text)
    await asyncio.sleep(sleep_sec)
    await msg.delete()
    try:
        await message.delete()
    except BadRequest:
        pass
    return


async def send_tokens_to_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Explain a tg channel post to the user
    Handle message from channel in a chat
    """
    if (
        not update.message
        or not update.message.text
        or not update.message.reply_to_message
    ):
        return

    if not update.message.text[1:].isdigit():
        return await _reply_and_delete(
            update.message,
            "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –ø–ª—é—Å–∏–∫–∞)",
        )

    to_send = int(update.message.text[1:])

    if to_send <= 0:
        return await _reply_and_delete(
            update.message,
            "–ù—É —Ç—ã –∂–∞–¥–Ω—ã–π –ø—ë—Å üê∫....................",
        )

    from_user_tg = update.effective_user
    from_user_id = from_user_tg.id
    balance = await get_user_balance(from_user_id)

    if balance < to_send:
        return await _reply_and_delete(
            update.message,
            "–£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –±—É—Ä–≥–µ—Ä–æ–≤.....",
        )

    to_user_tg = update.message.reply_to_message.from_user
    if to_user_tg.is_bot:
        return await _reply_and_delete(
            update.message,
            "–ú–Ω–µ –Ω–µ –Ω—É–∂–Ω—ã —Ç–≤–æ–∏ –±—É—Ä–≥–µ—Ä—ã, —è –∏ –µ—Å—Ç—å –±—É—Ä–≥–µ—Ä",
        )

    to_user_id = to_user_tg.id
    if from_user_id == to_user_id:
        return  # no need to send tokens to yourself

    to_user = await get_user_by_id(to_user_id)
    if not to_user or to_user["type"] == UserType.BLOCKED_BOT:
        return await _reply_and_delete(
            update.message,
            f"–ù–µ –≤–∏–∂—É {to_user_tg.name} –≤ –±–æ—Ç–µ! –∞–π-—è–π-—è–π üòø",
            sleep_sec=10,
        )

    # add a treasury transaction: -send, +send
    # send a private messages to both users

    await transfer_tokens(from_user_id, to_user_id, to_send)

    from_user_balance = await get_user_balance(from_user_id)
    to_user_balance = await get_user_balance(to_user_id)

    msend = await context.bot.send_message(
        chat_id=from_user_id,
        text=f"""
–û—Ç–ø—Ä–∞–≤–∏–ª {to_user_tg.name}: -{to_send} üçî

–¢–≤–æ–π –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {from_user_balance} üçî
        """,
    )

    mreceive = await context.bot.send_message(
        chat_id=to_user_id,
        text=f"""
–í–∞–º –±—É—Ä–≥–µ—Ä—ã –æ—Ç {from_user_tg.name}: +{to_send} üçî

–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å {to_user_balance} üçî
        """,
    )

    # update balances

    reaction = random.choice(["üëå", "üïä", "üëç", "üéâ", "ü§ù", "üòò", "ü´°"])
    await update.message.set_reaction(reaction=reaction, is_big=True)

    await asyncio.sleep(60)
    try:
        await msend.delete()
        await mreceive.delete()
    except BadRequest:
        pass
